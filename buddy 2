<!DOCTYPE html>
<html lang="hi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>किसान मित्र प्रो</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        /* All CSS from the previous version is included here, no changes needed */
        * { margin: 0; padding: 0; box-sizing: border-box; -webkit-tap-highlight-color: transparent; }
        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background: #f0f4f8; color: #333; line-height: 1.6; overscroll-behavior: none; touch-action: manipulation; }
        #welcomeScreen { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: linear-gradient(135deg, #2ECC71, #3498DB); display: flex; flex-direction: column; justify-content: center; align-items: center; color: white; z-index: 1000; transition: opacity 0.5s; }
        .logo-container { text-align: center; animation: fadeIn 1.5s ease-in-out; }
        .logo-animation { font-size: 4rem; margin-bottom: 1rem; animation: pulse 2s infinite, bounce 2s infinite; }
        @keyframes fadeIn { from { opacity: 0; transform: translateY(20px); } to { opacity: 1; transform: translateY(0); } }
        @keyframes pulse { 0% { transform: scale(1); } 50% { transform: scale(1.1); } 100% { transform: scale(1); } }
        @keyframes bounce { 0%, 20%, 50%, 80%, 100% { transform: translateY(0); } 40% { transform: translateY(-20px); } 60% { transform: translateY(-10px); } }
        #langScreen { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: linear-gradient(135deg, #2ECC71, #3498DB); color: #fff; display: none; flex-direction: column; justify-content: center; align-items: center; text-align: center; z-index: 999; padding: 20px; }
        .langBtn { background: rgba(255,255,255,0.2); border: 2px solid rgba(255,255,255,0.3); border-radius: 15px; padding: 18px; margin: 12px 0; width: 85%; max-width: 300px; color: #fff; font-size: 1.2rem; font-weight: 500; backdrop-filter: blur(10px); -webkit-backdrop-filter: blur(10px); transition: all 0.3s; cursor: pointer; }
        .langBtn:active { background: rgba(255,255,255,0.3); transform: scale(0.98); }
        #profileSetup { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: #fff; display: none; flex-direction: column; z-index: 998; }
        .profile-form { padding: 25px 20px; flex: 1; overflow-y: auto; display: flex; flex-direction: column; align-items: center; }
        .profile-pic { width: 130px; height: 130px; border-radius: 50%; background: #f0f4f8; margin: 0 auto 25px; display: flex; justify-content: center; align-items: center; font-size: 3.5rem; color: #2ECC71; overflow: hidden; box-shadow: 0 4px 10px rgba(0,0,0,0.1); border: 3px solid #fff; cursor: pointer; }
        .profile-pic img { width: 100%; height: 100%; object-fit: cover; }
        .screen { position: fixed; top: 0; left: 0; width: 100%; height: 100%; display: none; flex-direction: column; background: #fff; }
        .screen.active { display: flex; animation: fadeIn 0.3s; }
        header { background: linear-gradient(90deg, #2ECC71, #27AE60); color: #fff; padding: 16px; font-size: 1.2rem; font-weight: 600; position: sticky; top: 0; z-index: 10; box-shadow: 0 2px 10px rgba(0,0,0,0.1); display: flex; align-items: center; }
        .backBtn { background: none; border: none; color: #fff; font-size: 1.4rem; margin-right: 15px; padding: 0; width: 40px; height: 40px; display: flex; align-items: center; justify-content: center; cursor: pointer; }
        .content { flex: 1; overflow-y: auto; padding: 15px; background: #f8f9fa; -webkit-overflow-scrolling: touch; }
        .card { background: #fff; border-radius: 12px; padding: 18px; margin: 10px 0; box-shadow: 0 2px 8px rgba(0,0,0,0.08); transition: transform 0.2s; }
        .card:active { transform: scale(0.98); }
        .grid { display: grid; grid-template-columns: 1fr 1fr; gap: 12px; margin-bottom: 15px; }
        .btn { background: #FF6B35; color: #fff; border: none; padding: 16px; border-radius: 12px; font-size: 1rem; font-weight: 600; width: 100%; margin: 8px 0; box-shadow: 0 4px 8px rgba(255,107,53,0.3); transition: all 0.2s; cursor: pointer; }
        .btn:active { transform: translateY(2px); box-shadow: 0 2px 4px rgba(255,107,53,0.3); }
        .btn.secondary { background: #6c757d; box-shadow: 0 4px 8px rgba(108, 117, 125, 0.3); }
        .btn.secondary:active { box-shadow: 0 2px 4px rgba(108, 117, 125, 0.3); }
        input, select { width: 100%; padding: 14px; border: 1px solid #ddd; border-radius: 10px; margin: 8px 0; font-size: 1rem; background: #fff; -webkit-appearance: none; appearance: none; }
        input:focus, select:focus { border-color: #2ECC71; outline: none; box-shadow: 0 0 0 2px rgba(46, 204, 113, 0.2); }
        label { font-weight: 500; margin: 8px 0; display: block; color: #444; }
        .bottomNav { position: fixed; bottom: 0; width: 100%; background: #fff; display: flex; border-top: 1px solid #eee; box-shadow: 0 -2px 10px rgba(0,0,0,0.05); z-index: 20; }
        .navBtn { flex: 1; padding: 12px 0; border: none; background: none; color: #888; font-size: 0.8rem; display: flex; flex-direction: column; align-items: center; justify-content: center; transition: all 0.2s; cursor: pointer; }
        .navBtn.active { color: #2ECC71; }
        .navBtn i { font-size: 1.4rem; margin-bottom: 4px; }
        .statusPaid { background: #d4edda; color: #155724; padding: 6px 12px; border-radius: 20px; font-size: 0.85rem; display: inline-block; }
        .statusPending { background: #f8d7da; color: #721c24; padding: 6px 12px; border-radius: 20px; font-size: 0.85rem; display: inline-block; }
        .modal { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); display: none; align-items: center; justify-content: center; z-index: 1000; padding: 20px; }
        .modalContent { background: #fff; width: 100%; max-width: 400px; border-radius: 16px; padding: 25px; box-shadow: 0 10px 30px rgba(0,0,0,0.2); animation: modalAppear 0.3s; }
        @keyframes modalAppear { from { opacity: 0; transform: scale(0.9); } to { opacity: 1; transform: scale(1); } }
        .editBtn { background: #3498DB; color: #fff; border: none; padding: 8px 15px; border-radius: 8px; margin: 5px; font-size: 0.9rem; cursor: pointer; }
        .delBtn { background: #E74C3C; color: #fff; border: none; padding: 8px 15px; border-radius: 8px; margin: 5px; font-size: 0.9rem; cursor: pointer; }
        .hidden { display: none !important; }
        .error { border-color: #E74C3C !important; }
        .error-message { color: #E74C3C; font-size: 0.85rem; margin-top: -5px; margin-bottom: 5px; }
        .voice-recorder { display: flex; align-items: center; margin: 15px 0; padding: 15px; background: #f0f4f8; border-radius: 12px; }
        .record-btn { background: #3498DB; color: white; border: none; padding: 12px; border-radius: 50%; width: 55px; height: 55px; margin-right: 15px; box-shadow: 0 4px 8px rgba(52, 152, 219, 0.3); transition: all 0.2s; cursor: pointer; }
        .record-btn:active { transform: scale(0.95); }
        .record-btn.recording { background: #E74C3C; animation: pulse 1s infinite; }
        .audio-player { width: 100%; margin-top: 15px; border-radius: 10px; background: #f0f4f8; }
        @media (max-width: 360px) { .grid { grid-template-columns: 1fr; } .logo-animation { font-size: 3.5rem; } .profile-pic { width: 110px; height: 110px; } }
        select { background-image: url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%23555' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M6 9l6 6 6-6'/%3E%3C/svg%3E"); background-repeat: no-repeat; background-position: right 15px center; background-size: 16px; padding-right: 45px; }
    </style>
</head>
<body>
    <!-- Welcome Animation -->
    <div id="welcomeScreen">
        <div class="logo-container">
            <i class="fas fa-tractor logo-animation"></i>
            <h2>किसान मित्र प्रो</h2>
            <p>आपका स्वागत है</p>
        </div>
    </div>

    <!-- Language Selection -->
    <div id="langScreen">
        <div>
            <i class="fas fa-tractor" style="font-size:4rem; margin-bottom:15px;"></i>
            <h2 style="margin-bottom:10px;">किसान मित्र प्रो</h2>
            <p style="margin-bottom:25px;">भाषा चुनें / Select Language</p>
            <button class="langBtn" onclick="setLanguage('hindi')">हिंदी</button>
            <button class="langBtn" onclick="setLanguage('english')">English</button>
        </div>
    </div>

    <!-- Profile Setup -->
    <div id="profileSetup">
        <header>
            <span id="profileTitle">प्रोफाइल सेटअप</span>
        </header>
        <div class="profile-form">
            <div class="profile-pic" onclick="document.getElementById('profileUpload').click()">
                <i class="fas fa-user-plus"></i>
                <img id="profileImage" class="hidden">
            </div>
            <input type="file" id="profileUpload" accept="image/*" class="hidden">
            
            <input type="text" id="userName" placeholder="* आपका नाम" required style="margin-bottom:20px;">
            
            <button class="btn" onclick="saveProfile()">जारी रखें</button>

            <!-- NEW: Reset button -->
            <button class="btn secondary" onclick="resetApp()" style="margin-top: 50px;">
                <i class="fas fa-sync-alt"></i> सारा डेटा साफ़ करें और रीसेट करें
            </button>
        </div>
    </div>

    <!-- Dashboard -->
    <div id="dashboard" class="screen">
        <header>
            <span id="title">किसान मित्र</span>
        </header>
        <div class="content">
            <div class="grid">
                <div class="card"><i class="fas fa-calendar-day" style="color:#2ECC71; font-size:1.8rem; margin-bottom:8px;"></i><span id="todayWork">आज का काम</span><br><b id="todayCount">0</b></div>
                <div class="card"><i class="fas fa-rupee-sign" style="color:#2ECC71; font-size:1.8rem; margin-bottom:8px;"></i><span id="monthIncome">इस महीने की कमाई</span><br><b id="monthIncomeVal">₹0</b></div>
                <div class="card"><i class="fas fa-clock" style="color:#FF6B35; font-size:1.8rem; margin-bottom:8px;"></i><span id="pendingPay">लंबित भुगतान</span><br><b id="pendingAmt">₹0</b></div>
                <div class="card"><i class="fas fa-users" style="color:#3498DB; font-size:1.8rem; margin-bottom:8px;"></i><span id="totalCust">कुल ग्राहक</span><br><b id="customerCount">0</b></div>
            </div>
            <button class="btn" onclick="showScreen('addWork')"><i class="fas fa-plus"></i> <span id="addWorkBtn">नया काम जोड़ें</span></button>
            <h3 style="margin:20px 0 10px; color:#555;">हाल के काम</h3>
            <div id="recentList"></div>
        </div>
    </div>
  
    <!-- Add/Edit Work Screen -->
    <div id="addWork" class="screen">
        <header>
            <button class="backBtn" onclick="showScreen('dashboard')"><i class="fas fa-chevron-left"></i></button>
            <span id="addTitle">नया काम जोड़ें</span>
        </header>
        <div class="content">
            <form id="workForm" onsubmit="return false;">
                <input type="hidden" id="editId">
                <input type="text" id="custName" placeholder="* ग्राहक का नाम" required><div id="custNameError" class="error-message hidden">कृपया ग्राहक का नाम दर्ज करें</div>
                <input type="tel" id="custMobile" placeholder="मोबाइल नंबर">
                <select id="custVillage" required><option value="">* गाँव चुनें</option><option>Bas Bisna</option><option>Bhatiwar</option><option>Ked</option><option>Balaji</option><option>Chanana</option><option>Sultana</option><option>Gudha</option><option value="other">अन्य</option></select><div id="custVillageError" class="error-message hidden">कृपया गाँव चुनें</div>
                <select id="workType" required><option value="">* काम का प्रकार</option><option>खेत जोतना (Ploughing)</option><option>फसल कटाई (Harvesting)</option><option>बुवाई (Sowing)</option><option>ढुलाई (Transport)</option><option>सिंचाई (Irrigation)</option><option>खरपतवार निकालना (Weeding)</option><option>खाद डालना (Fertilizing)</option><option>स्प्रे (Spraying)</option><option>थ्रेसिंग (Threshing)</option><option>ट्रैक्टर सर्विस (Tractor Service)</option><option value="other">अन्य (Other)</option></select><div id="workTypeError" class="error-message hidden">कृपया काम का प्रकार चुनें</div>
                <div style="display:grid; grid-template-columns:2fr 1fr; gap:10px;">
                    <input type="number" id="workQty" placeholder="* मात्रा" required><select id="workUnit"><option>बीघा</option><option>एकड़</option><option>घंटे</option><option>दिन</option><option value="other">अन्य</option></select>
                </div><div id="workQtyError" class="error-message hidden">कृपया मात्रा दर्ज करें</div>
                <input type="number" id="workRate" placeholder="* दर (₹)" required><div id="workRateError" class="error-message hidden">कृपया दर दर्ज करें</div>
                <input type="number" id="totalAmount" placeholder="* कुल राशि" readonly required><div id="totalAmountError" class="error-message hidden">कुल राशि की गणना नहीं की जा सकी</div>
                <input type="date" id="workDate" required><div id="workDateError" class="error-message hidden">कृपया तारीख चुनें</div>
                <select id="paymentStatus" required><option value="">* भुगतान स्थिति</option><option value="pending">भुगतान लंबित</option><option value="partial">आधा भुगतान</option><option value="paid">पूरा भुगतान</option></select><div id="paymentStatusError" class="error-message hidden">कृपया भुगतान स्थिति चुनें</div>
                <input type="number" id="paidAmount" placeholder="मिली राशि" class="hidden">
                <div class="voice-recorder"><button type="button" class="record-btn" id="recordBtn"><i class="fas fa-microphone"></i></button><span id="recordStatus">वॉइस नोट जोड़ें</span></div>
                <audio id="audioPlayer" class="audio-player hidden" controls></audio><input type="hidden" id="voiceNote">
                <button type="button" class="btn" id="saveBtn" onclick="saveWork()">सहेजें</button>
            </form>
        </div>
    </div>

    <!-- All Works, Customer Details, Payments Screens -->
    <div id="worksList" class="screen"><header><button class="backBtn" onclick="showScreen('dashboard')"><i class="fas fa-chevron-left"></i></button><span id="worksTitle">सभी काम</span></header><div class="content" id="allWorksList"></div></div>
    <div id="customerDetail" class="screen"><header><button class="backBtn" onclick="showScreen('payments')"><i class="fas fa-chevron-left"></i></button><span id="custDetailTitle">ग्राहक विवरण</span></header><div class="content"><div id="customerInfo"></div><div id="customerWorks"></div></div></div>
    <div id="payments" class="screen"><header><button class="backBtn" onclick="showScreen('dashboard')"><i class="fas fa-chevron-left"></i></button><span id="payTitle">भुगतान</span></header><div class="content"><input type="text" id="searchCustomer" placeholder="ग्राहक खोजें..." oninput="filterCustomers(this.value)"><div id="customerList"></div></div></div>

    <!-- Bottom Navigation -->
    <div class="bottomNav"><button class="navBtn active" onclick="showScreen('dashboard')"><i class="fas fa-home"></i><span id="navHome">होम</span></button><button class="navBtn" onclick="showScreen('addWork')"><i class="fas fa-plus-circle"></i><span id="navAdd">जोड़ें</span></button><button class="navBtn" onclick="showScreen('payments')"><i class="fas fa-rupee-sign"></i><span id="navPay">भुगतान</span></button><button class="navBtn" onclick="showAllWorks()"><i class="fas fa-list"></i><span id="navList">सूची</span></button></div>

    <!-- Modals -->
    <div id="otherModal" class="modal"><div class="modalContent"><h3 id="otherModalTitle">अन्य विकल्प जोड़ें</h3><input type="text" id="otherInput" placeholder="दर्ज करें" style="margin:15px 0;"><button class="btn" onclick="addOtherOption()" style="margin-bottom:10px;">जोड़ें</button><button class="btn" style="background:#666;" onclick="closeOtherModal()">रद्द करें</button></div></div>
    <div id="payModal" class="modal"><div class="modalContent"><h3>भुगतान अपडेट</h3><p>ग्राहक: <span id="modalCustomer"></span></p><p>लंबित राशि: ₹<span id="modalPending"></span></p><input type="number" id="modalAmount" placeholder="भुगतान राशि" style="margin:15px 0;"><button class="btn" onclick="updatePayment()" style="margin-bottom:10px;">अपडेट करें</button><button class="btn" style="background:#666;" onclick="closeModal()">रद्द करें</button></div></div>

<script>
    // All JavaScript logic from here...
    
    // TEXTS FOR DIFFERENT LANGUAGES
    const texts = {
        hindi: { title: "किसान मित्र", addTitle: "नया काम जोड़ें", worksTitle: "सभी काम", payTitle: "भुगतान", custDetailTitle: "ग्राहक विवरण", todayWork: "आज का काम", monthIncome: "इस महीने की कमाई", pendingPay: "लंबित भुगतान", totalCust: "कुल ग्राहक", addWorkBtn: "नया काम जोड़ें", search: "ग्राहक खोजें...", save: "सहेजें", navHome: "होम", navAdd: "जोड़ें", navPay: "भुगतान", navList: "सूची", profileTitle: "प्रोफाइल सेटअप", otherModalTitle: "अन्य विकल्प जोड़ें" },
        english: { title: "Farmer Buddy", addTitle: "Add Work", worksTitle: "All Works", payTitle: "Payments", custDetailTitle: "Customer Details", todayWork: "Today's Work", monthIncome: "This Month Income", pendingPay: "Pending Payment", totalCust: "Total Customers", addWorkBtn: "Add New Work", search: "Search customers...", save: "Save", navHome: "Home", navAdd: "Add", navPay: "Payments", navList: "List", profileTitle: "Profile Setup", otherModalTitle: "Add Other Option" }
    };

    // APP STATE
    let currentLanguage = 'hindi';
    let appData = { works: [], customers: {} };
    let mediaRecorder;
    let audioChunks = [];

    // --- APP INITIALIZATION ---
    function initApp() {
        showElement('welcomeScreen');

        setTimeout(() => {
            hideElement('welcomeScreen');
            const savedLanguage = localStorage.getItem('language');
            const userProfile = localStorage.getItem('userProfile');
            
            if (userProfile && savedLanguage) {
                // User is fully set up, go to dashboard
                loadData();
                setLanguage(savedLanguage, false); // Don't show screen, just apply texts
                showScreen('dashboard');
            } else {
                // User needs to go through setup
                showElement('langScreen');
            }
        }, 2500);

        setupEventListeners();
    }

    // --- EVENT LISTENERS ---
    function setupEventListeners() {
        document.getElementById('profileUpload').addEventListener('change', handleProfileUpload);
        document.querySelectorAll('select').forEach(s => s.addEventListener('change', handleOtherOption));
        ['workQty', 'workRate'].forEach(id => document.getElementById(id).addEventListener('input', calculateTotal));
        document.getElementById('paymentStatus').addEventListener('change', togglePaidAmountField);
        document.getElementById('recordBtn').addEventListener('click', toggleRecording);
    }
    
    // --- SETUP AND USER FLOW ---
    function setLanguage(lang, showNextScreen = true) {
        currentLanguage = lang;
        localStorage.setItem('language', lang);
        applyLanguage();
        if (showNextScreen) {
            hideElement('langScreen');
            showElement('profileSetup');
        }
    }
    
    function saveProfile() {
        const userName = document.getElementById('userName').value.trim();
        if (!userName) { alert("कृपया अपना नाम दर्ज करें"); return; }
        const profile = { name: userName, image: document.getElementById('profileImage').src || '' };
        localStorage.setItem('userProfile', JSON.stringify(profile));
        hideElement('profileSetup');
        showScreen('dashboard');
    }

    // --- DATA HANDLING ---
    function loadData() {
        const savedData = localStorage.getItem('farmData');
        if (savedData) {
            appData = JSON.parse(savedData);
        } else {
            appData = { works: [], customers: {} };
        }
    }

    function saveData() {
        localStorage.setItem('farmData', JSON.stringify(appData));
    }
    
    function rebuildCustomerData() {
        appData.customers = {};
        appData.works.forEach(work => {
            const customerKey = (work.mobile || work.customer).toLowerCase().trim();
            if (!appData.customers[customerKey]) {
                appData.customers[customerKey] = [];
            }
            appData.customers[customerKey].push(work);
        });
    }

    // --- CORE FUNCTIONALITY (Work, Payment, etc.) ---
    function saveWork() {
        if (!validateForm()) return;

        const workId = document.getElementById('editId').value || Date.now().toString();
        const work = {
            id: workId,
            date: document.getElementById('workDate').value,
            customer: document.getElementById('custName').value.trim(),
            mobile: document.getElementById('custMobile').value.trim(),
            village: document.getElementById('custVillage').value,
            type: document.getElementById('workType').value,
            qty: parseFloat(document.getElementById('workQty').value),
            unit: document.getElementById('workUnit').value,
            rate: parseFloat(document.getElementById('workRate').value),
            total: parseFloat(document.getElementById('totalAmount').value),
            status: document.getElementById('paymentStatus').value,
            voiceNote: document.getElementById('voiceNote').value,
            paid: 0
        };

        if (work.status === 'paid') work.paid = work.total;
        else if (work.status === 'partial') work.paid = parseFloat(document.getElementById('paidAmount').value) || 0;

        if (document.getElementById('editId').value) {
            const index = appData.works.findIndex(w => w.id === workId);
            if (index > -1) appData.works[index] = work;
        } else {
            appData.works.push(work);
        }

        rebuildCustomerData();
        saveData();
        resetForm();
        showScreen('dashboard');
        alert("काम सफलतापूर्वक सहेजा गया!");
    }
    
    function editWork(id) {
        const work = appData.works.find(w => w.id === id);
        if (!work) return;
        
        resetForm();
        Object.keys(work).forEach(key => {
            const el = document.getElementById(mapWorkKeyToElementId(key));
            if (el) el.value = work[key];
        });
        document.getElementById('editId').value = work.id; // Crucial
        
        togglePaidAmountField();
        if (work.voiceNote) {
            const audioPlayer = document.getElementById('audioPlayer');
            audioPlayer.src = work.voiceNote;
            audioPlayer.classList.remove('hidden');
        }
        
        document.getElementById('saveBtn').textContent = 'अपडेट करें';
        showScreen('addWork');
    }

    function deleteWork(id) {
        if (!confirm('क्या आप वाकई इस काम को डिलीट करना चाहते हैं?')) return;
        appData.works = appData.works.filter(w => w.id !== id);
        rebuildCustomerData();
        saveData();
        if (document.getElementById('worksList').classList.contains('active')) {
            showAllWorks();
        } else {
            refreshDashboard();
        }
    }

    function updatePayment() {
        const amount = parseFloat(document.getElementById('modalAmount').value);
        if (!amount || amount <= 0) { alert("कृपया वैध राशि दर्ज करें"); return; }
        
        const customerKey = document.getElementById('payModal').dataset.customerKey;
        if(!customerKey) return;
        
        let remainingToPay = amount;
        
        // Prioritize updating works that belong to this customer
        appData.works.forEach(work => {
            const workCustomerKey = (work.mobile || work.customer).toLowerCase().trim();
            if (workCustomerKey === customerKey && remainingToPay > 0) {
                const pending = work.total - (work.paid || 0);
                if (pending > 0) {
                    const payment = Math.min(remainingToPay, pending);
                    work.paid = (work.paid || 0) + payment;
                    remainingToPay -= payment;
                    work.status = work.paid >= work.total ? 'paid' : 'partial';
                }
            }
        });

        rebuildCustomerData();
        saveData();
        closeModal();
        
        if (document.getElementById('customerDetail').classList.contains('active')) {
            showCustomerDetail(customerKey);
        } else {
            loadPayments();
        }
        alert("भुगतान सफलतापूर्वक अपडेट किया गया!");
    }

    async function toggleRecording() {
        if (mediaRecorder && mediaRecorder.state === 'recording') {
            mediaRecorder.stop();
            document.getElementById('recordBtn').classList.remove('recording');
            document.getElementById('recordStatus').textContent = "रिकॉर्डिंग बंद";
            return;
        }

        try {
            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            mediaRecorder = new MediaRecorder(stream);
            audioChunks = [];
            mediaRecorder.ondataavailable = e => audioChunks.push(e.data);
            mediaRecorder.onstop = () => {
                const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
                const audioUrl = URL.createObjectURL(audioBlob);
                const audioPlayer = document.getElementById('audioPlayer');
                audioPlayer.src = audioUrl;
                audioPlayer.classList.remove('hidden');
                
                const reader = new FileReader();
                reader.readAsDataURL(audioBlob);
                reader.onloadend = () => document.getElementById('voiceNote').value = reader.result;
                
                stream.getTracks().forEach(track => track.stop()); // Release microphone
            };
            mediaRecorder.start();
            document.getElementById('recordBtn').classList.add('recording');
            document.getElementById('recordStatus').textContent = "रिकॉर्डिंग चल रही है...";
        } catch (error) {
            console.error("Microphone access error:", error);
            alert("माइक्रोफ़ोन का उपयोग नहीं कर सकते।\n\nकृपया सुनिश्चित करें कि आपने अनुमति दी है। यदि यह एक वेब पेज है, तो सुनिश्चित करें कि यह 'https://' पर चल रहा है।");
        }
    }

    // --- UI/SCREEN RENDERING ---
    // (Functions like showScreen, refreshDashboard, showAllWorks, showCustomerDetail, loadPayments)
    // Most of these are similar to the previous version but are now more robust.
    function showScreen(screenId) {
        document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
        document.getElementById(screenId).classList.add('active');
        
        document.querySelectorAll('.navBtn').forEach(b => b.classList.remove('active'));
        const navMap = { 'dashboard': 0, 'addWork': 1, 'payments': 2 };
        if (screenId === 'worksList') document.querySelectorAll('.navBtn')[3].classList.add('active');
        if (navMap[screenId] !== undefined) document.querySelectorAll('.navBtn')[navMap[screenId]].classList.add('active');

        if (screenId === 'dashboard') refreshDashboard();
        if (screenId === 'payments') loadPayments();
        if (screenId === 'worksList') showAllWorks();
        if (screenId === 'addWork' && !document.getElementById('editId').value) resetForm();
    }
    
    function refreshDashboard() {
        loadData(); // Always get fresh data
        const today = new Date().toISOString().split('T')[0];
        const thisMonth = today.substring(0, 7);

        document.getElementById('todayCount').textContent = appData.works.filter(w => w.date === today).length;
        document.getElementById('monthIncomeVal').textContent = `₹${appData.works.filter(w => w.date.startsWith(thisMonth)).reduce((sum, w) => sum + (w.paid || 0), 0).toFixed(2)}`;
        document.getElementById('pendingAmt').textContent = `₹${appData.works.reduce((sum, w) => sum + (w.total - (w.paid || 0)), 0).toFixed(2)}`;
        document.getElementById('customerCount').textContent = Object.keys(appData.customers).length;

        const recentList = document.getElementById('recentList');
        const recentWorks = appData.works.slice().reverse().slice(0, 5);
        if(recentWorks.length === 0) {
            recentList.innerHTML = '<p style="text-align:center; color:#666; padding:20px;">कोई काम नहीं जोड़ा गया है</p>';
        } else {
             recentList.innerHTML = recentWorks.map(work => `
                <div class="card">
                    <div style="display:flex; justify-content:space-between;">
                        <b>${work.customer}</b>
                        <span class="${work.status === 'paid' ? 'statusPaid' : 'statusPending'}">${work.status === 'paid' ? 'पूरा' : work.status === 'partial' ? 'आधा' : 'लंबित'}</span>
                    </div>
                    <div>${work.type} - ${work.qty} ${work.unit}</div>
                    <div>₹${work.total.toFixed(2)} • ${work.date}</div>
                </div>
            `).join('');
        }
    }

    function showAllWorks() {
        const listEl = document.getElementById('allWorksList');
        listEl.innerHTML = '';
        const sortedWorks = appData.works.slice().reverse();
        if (sortedWorks.length === 0) {
            listEl.innerHTML = '<p style="text-align:center; color:#666; padding:30px;">कोई काम नहीं जोड़ा गया है</p>';
        } else {
            listEl.innerHTML = sortedWorks.map(work => `
                <div class="card">
                    <div><b>${work.customer}</b> (${work.village})<br>${work.type} - ${work.qty} ${work.unit} @ ₹${work.rate}<br>कुल: ₹${work.total.toFixed(2)} | मिला: ₹${(work.paid || 0).toFixed(2)} | लंबित: ₹${(work.total - (work.paid || 0)).toFixed(2)}<br><small>${work.date}</small></div>
                    ${work.voiceNote ? `<div style="margin-top:10px;"><audio src="${work.voiceNote}" controls class="audio-player"></audio></div>` : ''}
                    <div style="margin-top:15px; display:flex; justify-content:flex-end;"><button class="editBtn" onclick="editWork('${work.id}')">एडिट</button><button class="delBtn" onclick="deleteWork('${work.id}')">डिलीट</button></div>
                </div>
            `).join('');
        }
        showScreen('worksList');
    }

    function loadPayments() {
        const listEl = document.getElementById('customerList');
        listEl.innerHTML = '';
        if (Object.keys(appData.customers).length === 0) {
            listEl.innerHTML = '<p style="text-align:center; color:#666; padding:30px;">कोई ग्राहक नहीं जोड़ा गया है</p>';
        } else {
            listEl.innerHTML = Object.entries(appData.customers).map(([key, works]) => {
                const total = works.reduce((sum, w) => sum + w.total, 0);
                const paid = works.reduce((sum, w) => sum + (w.paid || 0), 0);
                const pending = total - paid;
                return `
                    <div class="card" onclick="showCustomerDetail('${key}')" style="cursor: pointer;">
                        <div><b>${works[0].customer}</b><br>${works[0].mobile ? works[0].mobile + ' • ' : ''}${works[0].village}<br><b>कुल: ₹${total.toFixed(2)} • लंबित: ₹${pending.toFixed(2)}</b></div>
                        ${pending > 0 ? `<button class="btn" style="margin-top:15px;" onclick="event.stopPropagation(); showPayModal('${key}', '${works[0].customer}', ${pending})">भुगतान अपडेट</button>` : ''}
                    </div>
                `;
            }).join('');
        }
    }

    function showCustomerDetail(customerKey) {
        const works = (appData.customers[customerKey] || []).slice().reverse();
        if (works.length === 0) { showScreen('payments'); return; }
        const total = works.reduce((s, w) => s + w.total, 0);
        const paid = works.reduce((s, w) => s + (w.paid || 0), 0);
        const pending = total - paid;
        
        document.getElementById('customerInfo').innerHTML = `<div class="card"><h3>${works[0].customer}</h3><p>कुल राशि: ₹${total.toFixed(2)}</p><p>लंबित: ₹${pending.toFixed(2)}</p>${pending > 0 ? `<button class="btn" onclick="showPayModal('${customerKey}', '${works[0].customer}', ${pending})" style="margin-top:15px;">भुगतान अपडेट</button>` : ''}</div>`;
        document.getElementById('customerWorks').innerHTML = works.map(w => `<div class="card"><b>${w.date} - ${w.type}</b><div>कुल: ₹${w.total.toFixed(2)} | मिला: ₹${(w.paid || 0).toFixed(2)}</div></div>`).join('');
        
        showScreen('customerDetail');
    }

    // --- UTILITY AND HELPER FUNCTIONS ---
    function resetApp() {
        if (confirm("क्या आप वाकई ऐप का सारा डेटा हटाना चाहते हैं? यह वापस नहीं लाया जा सकेगा।")) {
            localStorage.clear();
            location.reload();
        }
    }

    function resetForm() {
        document.getElementById('workForm').reset();
        document.getElementById('editId').value = '';
        document.getElementById('voiceNote').value = '';
        const audioPlayer = document.getElementById('audioPlayer');
        audioPlayer.src = '';
        audioPlayer.classList.add('hidden');
        document.getElementById('paidAmount').classList.add('hidden');
        document.getElementById('workDate').value = new Date().toISOString().split('T')[0];
        document.querySelectorAll('.error, .error-message').forEach(el => el.classList.remove('error') || el.classList.add('hidden'));
        document.getElementById('saveBtn').textContent = 'सहेजें';
    }
    
    function mapWorkKeyToElementId(key) {
        const map = { customer: 'custName', mobile: 'custMobile', village: 'custVillage', type: 'workType', qty: 'workQty', unit: 'workUnit', rate: 'workRate', total: 'totalAmount', status: 'paymentStatus', paid: 'paidAmount', date: 'workDate' };
        return map[key] || key;
    }

    function handleOtherOption(event) {
        if (event.target.value === 'other') {
            document.getElementById('otherModal').dataset.selectId = event.target.id;
            showElement('otherModal');
        }
    }

    function addOtherOption() {
        const selectId = document.getElementById('otherModal').dataset.selectId;
        const value = document.getElementById('otherInput').value.trim();
        if (selectId && value) {
            const select = document.getElementById(selectId);
            const newOption = new Option(value, value, true, true);
            select.add(newOption);
            closeOtherModal();
        }
    }

    function calculateTotal() {
        const qty = parseFloat(document.getElementById('workQty').value) || 0;
        const rate = parseFloat(document.getElementById('workRate').value) || 0;
        document.getElementById('totalAmount').value = (qty * rate).toFixed(2);
    }
    
    function validateForm() {
        let isValid = true;
        ['custName', 'custVillage', 'workType', 'workQty', 'workRate', 'workDate', 'paymentStatus'].forEach(id => {
            const el = document.getElementById(id);
            const errEl = document.getElementById(id + 'Error');
            if (!el.value) {
                el.classList.add('error');
                errEl.classList.remove('hidden');
                isValid = false;
            } else {
                el.classList.remove('error');
                errEl.classList.add('hidden');
            }
        });
        return isValid;
    }
    
    function filterCustomers(query) {
        const term = query.toLowerCase().trim();
        document.querySelectorAll('#customerList .card').forEach(card => {
            card.style.display = card.textContent.toLowerCase().includes(term) ? 'block' : 'none';
        });
    }

    function showPayModal(customerKey, customerName, pendingAmount) {
        const modal = document.getElementById('payModal');
        modal.dataset.customerKey = customerKey;
        document.getElementById('modalCustomer').textContent = customerName;
        document.getElementById('modalPending').textContent = pendingAmount.toFixed(2);
        document.getElementById('modalAmount').value = '';
        showElement('payModal');
    }

    function applyLanguage() { Object.keys(texts[currentLanguage]).forEach(key => { const el = document.getElementById(key); if (el) el.textContent = texts[currentLanguage][key]; }); }
    function togglePaidAmountField() { document.getElementById('paidAmount').classList.toggle('hidden', document.getElementById('paymentStatus').value !== 'partial'); }
    function handleProfileUpload(e) { if(e.target.files[0]) { const reader = new FileReader(); reader.onload = e => document.getElementById('profileImage').src = e.target.result; reader.readAsDataURL(e.target.files[0]); document.getElementById('profileImage').classList.remove('hidden'); document.querySelector('.profile-pic i').classList.add('hidden'); } }
    function showElement(id) { document.getElementById(id).style.display = 'flex'; }
    function hideElement(id) { document.getElementById(id).style.display = 'none'; }
    function closeModal() { hideElement('payModal'); }
    function closeOtherModal() { hideElement('otherModal'); }

    // Start the app
    window.onload = initApp;
</script>
</body>
</html>
